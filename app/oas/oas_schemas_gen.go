// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"
)

type CreateUserReq struct {
	Users OptUserCommand `json:"users"`
}

// GetUsers returns the value of Users.
func (s *CreateUserReq) GetUsers() OptUserCommand {
	return s.Users
}

// SetUsers sets the value of Users.
func (s *CreateUserReq) SetUsers(val OptUserCommand) {
	s.Users = val
}

// DeleteUserByIDNoContent is response for DeleteUserByID operation.
type DeleteUserByIDNoContent struct{}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateUserReq returns new OptCreateUserReq with value set to v.
func NewOptCreateUserReq(v CreateUserReq) OptCreateUserReq {
	return OptCreateUserReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateUserReq is optional CreateUserReq.
type OptCreateUserReq struct {
	Value CreateUserReq
	Set   bool
}

// IsSet returns true if OptCreateUserReq was set.
func (o OptCreateUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateUserReq) Reset() {
	var v CreateUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateUserReq) SetTo(v CreateUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateUserReq) Get() (v CreateUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateUserReq) Or(d CreateUserReq) CreateUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateUserReq returns new OptUpdateUserReq with value set to v.
func NewOptUpdateUserReq(v UpdateUserReq) OptUpdateUserReq {
	return OptUpdateUserReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateUserReq is optional UpdateUserReq.
type OptUpdateUserReq struct {
	Value UpdateUserReq
	Set   bool
}

// IsSet returns true if OptUpdateUserReq was set.
func (o OptUpdateUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateUserReq) Reset() {
	var v UpdateUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateUserReq) SetTo(v UpdateUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateUserReq) Get() (v UpdateUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateUserReq) Or(d UpdateUserReq) UpdateUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserCommand returns new OptUserCommand with value set to v.
func NewOptUserCommand(v UserCommand) OptUserCommand {
	return OptUserCommand{
		Value: v,
		Set:   true,
	}
}

// OptUserCommand is optional UserCommand.
type OptUserCommand struct {
	Value UserCommand
	Set   bool
}

// IsSet returns true if OptUserCommand was set.
func (o OptUserCommand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserCommand) Reset() {
	var v UserCommand
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserCommand) SetTo(v UserCommand) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserCommand) Get() (v UserCommand, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserCommand) Or(d UserCommand) UserCommand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type UpdateUserReq struct {
	Users OptUserCommand `json:"users"`
}

// GetUsers returns the value of Users.
func (s *UpdateUserReq) GetUsers() OptUserCommand {
	return s.Users
}

// SetUsers sets the value of Users.
func (s *UpdateUserReq) SetUsers(val OptUserCommand) {
	s.Users = val
}

// Ref: #/components/schemas/User
type User struct {
	ID          OptString       `json:"id"`
	Name        OptString       `json:"name"`
	Email       OptString       `json:"email"`
	Department  OptString       `json:"department"`
	Roles       []UserRolesItem `json:"Roles"`
	Enabled     OptBool         `json:"enabled"`
	DateCreated OptString       `json:"dateCreated"`
	DateUpdated OptString       `json:"dateUpdated"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptString {
	return s.Email
}

// GetDepartment returns the value of Department.
func (s *User) GetDepartment() OptString {
	return s.Department
}

// GetRoles returns the value of Roles.
func (s *User) GetRoles() []UserRolesItem {
	return s.Roles
}

// GetEnabled returns the value of Enabled.
func (s *User) GetEnabled() OptBool {
	return s.Enabled
}

// GetDateCreated returns the value of DateCreated.
func (s *User) GetDateCreated() OptString {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *User) GetDateUpdated() OptString {
	return s.DateUpdated
}

// SetID sets the value of ID.
func (s *User) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetDepartment sets the value of Department.
func (s *User) SetDepartment(val OptString) {
	s.Department = val
}

// SetRoles sets the value of Roles.
func (s *User) SetRoles(val []UserRolesItem) {
	s.Roles = val
}

// SetEnabled sets the value of Enabled.
func (s *User) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetDateCreated sets the value of DateCreated.
func (s *User) SetDateCreated(val OptString) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *User) SetDateUpdated(val OptString) {
	s.DateUpdated = val
}

// Ref: #/components/schemas/UserCommand
type UserCommand struct {
	Name            OptString              `json:"name"`
	Email           OptString              `json:"email"`
	Roles           []UserCommandRolesItem `json:"Roles"`
	Department      OptString              `json:"department"`
	Password        OptString              `json:"password"`
	PasswordConfirm OptString              `json:"passwordConfirm"`
}

// GetName returns the value of Name.
func (s *UserCommand) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserCommand) GetEmail() OptString {
	return s.Email
}

// GetRoles returns the value of Roles.
func (s *UserCommand) GetRoles() []UserCommandRolesItem {
	return s.Roles
}

// GetDepartment returns the value of Department.
func (s *UserCommand) GetDepartment() OptString {
	return s.Department
}

// GetPassword returns the value of Password.
func (s *UserCommand) GetPassword() OptString {
	return s.Password
}

// GetPasswordConfirm returns the value of PasswordConfirm.
func (s *UserCommand) GetPasswordConfirm() OptString {
	return s.PasswordConfirm
}

// SetName sets the value of Name.
func (s *UserCommand) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserCommand) SetEmail(val OptString) {
	s.Email = val
}

// SetRoles sets the value of Roles.
func (s *UserCommand) SetRoles(val []UserCommandRolesItem) {
	s.Roles = val
}

// SetDepartment sets the value of Department.
func (s *UserCommand) SetDepartment(val OptString) {
	s.Department = val
}

// SetPassword sets the value of Password.
func (s *UserCommand) SetPassword(val OptString) {
	s.Password = val
}

// SetPasswordConfirm sets the value of PasswordConfirm.
func (s *UserCommand) SetPasswordConfirm(val OptString) {
	s.PasswordConfirm = val
}

type UserCommandRolesItem string

const (
	UserCommandRolesItemADMIN UserCommandRolesItem = "ADMIN"
	UserCommandRolesItemUSER  UserCommandRolesItem = "USER"
)

// AllValues returns all UserCommandRolesItem values.
func (UserCommandRolesItem) AllValues() []UserCommandRolesItem {
	return []UserCommandRolesItem{
		UserCommandRolesItemADMIN,
		UserCommandRolesItemUSER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserCommandRolesItem) MarshalText() ([]byte, error) {
	switch s {
	case UserCommandRolesItemADMIN:
		return []byte(s), nil
	case UserCommandRolesItemUSER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserCommandRolesItem) UnmarshalText(data []byte) error {
	switch UserCommandRolesItem(data) {
	case UserCommandRolesItemADMIN:
		*s = UserCommandRolesItemADMIN
		return nil
	case UserCommandRolesItemUSER:
		*s = UserCommandRolesItemUSER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserRolesItem string

const (
	UserRolesItemADMIN UserRolesItem = "ADMIN"
	UserRolesItemUSER  UserRolesItem = "USER"
)

// AllValues returns all UserRolesItem values.
func (UserRolesItem) AllValues() []UserRolesItem {
	return []UserRolesItem{
		UserRolesItemADMIN,
		UserRolesItemUSER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserRolesItem) MarshalText() ([]byte, error) {
	switch s {
	case UserRolesItemADMIN:
		return []byte(s), nil
	case UserRolesItemUSER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserRolesItem) UnmarshalText(data []byte) error {
	switch UserRolesItem(data) {
	case UserRolesItemADMIN:
		*s = UserRolesItemADMIN
		return nil
	case UserRolesItemUSER:
		*s = UserRolesItemUSER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
