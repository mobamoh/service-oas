// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateUser implements createUser operation.
	//
	// Create a user in the system.
	//
	// POST /users
	CreateUser(ctx context.Context, req OptUserCommand) (*User, error)
	// DeleteUserByID implements deleteUserByID operation.
	//
	// Deletes the user from the Sales System.
	//
	// DELETE /users/{userId}
	DeleteUserByID(ctx context.Context, params DeleteUserByIDParams) error
	// QueryUserByID implements queryUserByID operation.
	//
	// Returns the user details from Sales System.
	//
	// GET /users/{userId}
	QueryUserByID(ctx context.Context, params QueryUserByIDParams) (*User, error)
	// UpdateUser implements updateUser operation.
	//
	// Update the user details in the system.
	//
	// PUT /users
	UpdateUser(ctx context.Context, req OptUpdateUserReq) (*User, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
