// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package gen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec

INSERT INTO users (user_id, name, email, password_hash, roles, department, enabled, date_created, date_updated)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateUserParams struct {
	UserID       uuid.UUID
	Name         string
	Email        string
	PasswordHash []byte
	Roles        []string
	Department   *string
	Enabled      bool
	DateCreated  time.Time
	DateUpdated  time.Time
}

// ################# Commands ################ --
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Roles,
		arg.Department,
		arg.Enabled,
		arg.DateCreated,
		arg.DateUpdated,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const queryUserByEmail = `-- name: QueryUserByEmail :one
SELECT user_id, name, email, roles, password_hash, department, enabled, date_created, date_updated FROM users
WHERE email =  $1 LIMIT 1
`

func (q *Queries) QueryUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, queryUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Roles,
		&i.PasswordHash,
		&i.Department,
		&i.Enabled,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const queryUserByID = `-- name: QueryUserByID :one

SELECT user_id, name, email, roles, password_hash, department, enabled, date_created, date_updated FROM users
WHERE user_id =  $1 LIMIT 1
`

// ################ Queries ################ --
func (q *Queries) QueryUserByID(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, queryUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Roles,
		&i.PasswordHash,
		&i.Department,
		&i.Enabled,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}
